;обработчик прерывания int 06h (неизвестная команда)
;оказались в стеке, адресуемом теневой парой
;SS':SP'=E800:4000 (EC000h)
;CS:IP, сохраненные в стеке, указывают на следующий за опкодом байт команды
0000 1E            PUSH    DS
0001 60            PUSHA                       ;AX,CX,DX,BX,SP,BP,SI,DI
0002 06            PUSH    ES
0003 8BEC          MOV     BP,SP               ;BP - ук-ль стека после сохранения всех регистров
;теперь имеем
;[BP]=ES
;[BP+2]=DI
;[BP+4]=SI
;[BP+6]=BP
;[BP+8]=SP
;[BP+0Ah]=BX
;[BP+0Ch]=DX
;[BP+0Eh]=CX
;[BP+10h]=AX
;[BP+12h]=DS
;[BP+14h]=IP
;[BP+16h]=CS
;[BP+18h]=FLAGS
0005 8CD0          MOV     AX,SS
0007 8ED8          MOV     DS,AX               ;DS=сегмент стека при входе в прерывание (а значит, ко всем сохраненным выше в стеке можно обращаться через DS)
0009 E4C8          IN      AL,C8               ;c8h - порт информации о команде 1843вг1
000B 8AE0          MOV     AH,AL
000D E4C8          IN      AL,C8
000F A30000        MOV     [0000],AX           ;сохранили считанное из порта информации о команде в DS:0 (E800:0)
0012 E4CE          IN      AL,CE               ;ceh - порт первого слова команды 1843вг1
0014 8AE0          MOV     AH,AL
0016 E4CE          IN      AL,CE
0018 A30200        MOV     [0002],AX           ;сохранили считанное из порта слова команды в DS:2 (E800:2)
001B 8AC4          MOV     AL,AH               ;оставили только первый байт
001D BBF503        MOV     BX,03F5             ;адрес таблицы опкодов
0020 2E            CS:
0021 D7            XLAT                        ;AL=номер обработчика в таблице обработчиков команд
0022 32FF          XOR     BH,BH
0024 8AD8          MOV     BL,AL
0026 2E            CS:
0027 FFA7F504      JMP     [BX+04F5]           ;адрес таблицы адресов обработчиков команд
                                               ;перешли на обработчик соответствующей команды

002B B85300        MOV     AX,0E800h           ;адрес настраивается при загрузке EXE-шника - т.е. это был сегмент. В файле - 0053h
                                               ;возможно, использован как указатель конца кода эмулятора для загрузчика

;обработчик INT 02h (NMI)
;устанавливается при первом вызове сопроцессорной команды в обработчике INT 7
002E 50            PUSH    AX
002F 1E            PUSH    DS
0030 06            PUSH    ES
0031 33C0          XOR     AX,AX
0033 8ED8          MOV     DS,AX               ;уст DS на таблицу векторов прерываний
0035 B800E8        MOV     AX,E800
0038 8EC0          MOV     ES,AX               ;уст ES на область данных эмулятора E800
003A 26            ES:
003B A10000        MOV     AX,[0000]           ;прочесть сохраненный IP INT 2
003E A30400        MOV     [0004],AX           ;записать в таблицу векторов
0041 26            ES:
0042 A10200        MOV     AX,[0002]           ;прочесть сохраненный CS INT 2
0045 A30600        MOV     [0006],AX           ;записать в таблицу векторов
0048 26            ES:
0049 A10400        MOV     AX,[0004]           ;прочесть сохраненные флаги, бывшие до вызова INT 7
004C 07            POP     ES
004D 1F            POP     DS
004E 87EC          XCHG    BP,SP
;теперь распределение в стеке такое
;[BP]=AX
;[BP+2]=IP
;[BP+4]=CS
;[BP+6]=FLAGS
;SP'=BP до прерывания
0050 894606        MOV     [BP+06],AX          ;записать старые флаги
0053 87EC          XCHG    BP,SP               ;восстановить BP и SP
0055 B00A          MOV     AL,0A
0057 E6A0          OUT     A0,AL
0059 EB00          JMP     005B                ;очистить очередь команд
005B E4A0          IN      AL,A0
005D A820          TEST    AL,20
005F 7513          JNZ     0074
0061 9B            WAIT
0062 F1            DB      F1
0063 FD            STD
0064 E462          IN      AL,62
0066 0C40          OR      AL,40               ;установить триггер блокировки очереди команд процессора
0068 E662          OUT     62,AL
006A A810          TEST    AL,10               ;частота сопроцессора 8мгц?
006C 7504          JNZ     0072                ;да - уйти на 72
006E E6E0          OUT     E0,AL               ;иначе переключить синхронизатор
0070 EB00          JMP     0072                ;очистить очередь команд
0072 58            POP     AX
0073 CF            IRET

0074 B020          MOV     AL,20
0076 E6A0          OUT     A0,AL
0078 B062          MOV     AL,62
007A E620          OUT     20,AL
007C F1            DB      F1
007D FD            STD
007E E462          IN      AL,62
0080 0C40          OR      AL,40
0082 E662          OUT     62,AL
0084 A810          TEST    AL,10
0086 7504          JNZ     008C
0088 E6E0          OUT     E0,AL
008A EB00          JMP     008C
008C 58            POP     AX
008D CD02          INT     02
008F CF            IRET

;обработчик прерывания int 07h (сопроцессор)
0090 50            PUSH    AX
0091 1E            PUSH    DS
0092 33C0          XOR     AX,AX
0094 8ED8          MOV     DS,AX               ;установить DS на таблицу векторов прерываний
0096 A10400        MOV     AX,[0004]           ;прочесть IP обработчика INT 2 (NMI)
0099 36            SS:
009A A30000        MOV     [0000],AX           ;сохранить IP INT 2 в области данных эмулятора (E800:0000)
009D A10600        MOV     AX,[0006]           ;прочесть CS обработчика INT 2 (NMI)
00A0 36            SS:
00A1 A30200        MOV     [0002],AX           ;сохранить CS INT 2 в области данных эмулятора (E800:0002)
00A4 B82E00        MOV     AX,002E             
00A7 A30400        MOV     [0004],AX
00AA 8C0E0600      MOV     [0006],CS           ;установить обработчик INT2 (NMI) на E000:02Eh
00AE 1F            POP     DS
00AF 87E5          XCHG    SP,BP
;теперь распределение в стеке такое
;[BP]=AX
;[BP+2]=IP
;[BP+4]=CS
;[BP+6]=FLAGS
;SP'=BP до прерывания
00B1 8B4606        MOV     AX,[BP+06]          ;прочесть флаги, бывшие до прерывания
00B4 36            SS:
00B5 A30400        MOV     [0004],AX           ;сохранить старые флаги в E800:0004
00B8 C64607F1      MOV     BYTE PTR [BP+07],F1 ;уст старшие флаги: режим без сопроцессора, реальный, OF,DF,IF=0, TF=1
00BC FF4E02        DEC     WORD PTR [BP+02]    ;уст IP на байт опкода, вызвавшего прерывание
00BF E4C8          IN      AL,C8               ;c8h - порт информации о команде 1843вг1
00C1 8AE0          MOV     AH,AL
00C3 E4C8          IN      AL,C8
00C5 F6C40F        TEST    AH,0F               ;были ли сегментные префиксы?
00C8 7403          JZ      00CD                ;нет - уйти на CD
00CA FF4E02        DEC     WORD PTR [BP+02]    ;были - сделать IP указывающим на префикс (начало команды)
00CD 87E5          XCHG    SP,BP
00CF E462          IN      AL,62               ;2-й порт конфигурации компьютера
00D1 24D7          AND     AL,D7               ;сбросить бит 5 (????пусть кнопка TURBO переключает синхронизацию)
00D3 E662          OUT     62,AL
00D5 A810          TEST    AL,10               ;частота сопроцессора 8МГц?
00D7 750A          JNZ     00E3                ;да - уйти на 0E3
00D9 E461          IN      AL,61               ;иначе прочесть 1-й порт конфигурации компьютера 
00DB A810          TEST    AL,10               ;режим синхронизатора 8МГц?
00DD 7404          JZ      00E3                ;нет - уйти на 0E3
00DF E6E0          OUT     E0,AL               ;иначе переключить синхронизатор
00E1 EB00          JMP     00E3                ;очистить очередь команд
00E3 F1            DB      F1
00E4 FC            CLD
00E5 58            POP     AX
00E6 CF            IRET

;обработчик сдвигов SHIFT immediate
;формат команд:
;(SHIFT) reg/mem,immed8 
;первый байт:
;C0 - сдвигаемый операнд 8 бит
;С1 - сдвигаемый операнд 16 бит
;второй байт: mod-reg-rm
;тип сдвига определяется reg:
;000 - ROL
;001 - ROR
;010 - RCL
;011 - RCR
;100 - SHL
;101 - SHR
;110 - SHL, как и для 100 (а по справочникам - ничего)
;111 - SAR
;mod и rm аналогичны обычной кодировке для одноадресных команд
;последний байт - число, на которое нужно сдвинуть
00E7 80CC02        OR      AH,02               ;установить, что это команда SHIFT, для дальнейшей обработки
00EA C49E1400      LES     BX,[BP+0014]        ;BX указ. на след. за опкодом байт обрабатываемой команды          
00EE 8CC1          MOV     CX,ES               ;ES=CX= CS обрабатываемой команды
00F0 E80801        CALL    01FB                ;возвращает адрес первого операнда в SI и сегмент операнда в ES
00F3 E8D500        CALL    01CB                ;возвращает второй операнд в CL или CX
00F6 E8B000        CALL    01A9                ;возвращает первый операнд в DL или DX
00F9 80E11F        AND     CL,1F               ;ограничить величину сдвига
00FC 8BF8          MOV     DI,AX
00FE 83E738        AND     DI,+38              ;вычленяем из mod-reg-rm команды только reg
0101 D1EF          SHR     DI,1
0103 D1EF          SHR     DI,1                ;превратили reg в указатель при переходе 
0105 F6C401        TEST    AH,01               ;8 или 16 бит команда?
0108 50            PUSH    AX
0109 8AA61800      MOV     AH,[BP+0018]        ;старые флаги
010D 7406          JZ      0115                ;8 бит - уйти на 115
010F 9E            SAHF                        ;записать старые флаги (мл.часть)
0110 2E            CS:
0111 FFA50F05      JMP     [DI+050F]           ;переход по таблице сдвига в 16-разрядном случае

                                               ;8-разр. случай
0115 9E            SAHF                        ;записать старые флаги (мл.часть)
0116 2E            CS:
0117 FFA51F05      JMP     [DI+051F]           ;переход по таблице сдвига в 8-разрядном случае

;8-битный операнд
011B D2C2          ROL     DL,CL               ;000
011D EB3F          JMP     015E
011F 90            NOP
0120 D2CA          ROR     DL,CL               ;001
0122 EB3A          JMP     015E
0124 90            NOP
0125 D2D2          RCL     DL,CL               ;010
0127 EB35          JMP     015E
0129 90            NOP
012A D2DA          RCR     DL,CL               ;011
012C EB30          JMP     015E
012E 90            NOP
012F D2E2          SHL     DL,CL               ;100 и 110
0131 EB2B          JMP     015E
0133 90            NOP
0134 D2EA          SHR     DL,CL               ;101
0136 EB26          JMP     015E
0138 90            NOP
0139 D2FA          SAR     DL,CL               ;111
013B EB21          JMP     015E
013D 90            NOP

;16-битный операнд
013E D3C2          ROL     DX,CL               ;000
0140 EB1C          JMP     015E                    
0142 90            NOP                             
0143 D3CA          ROR     DX,CL               ;001
0145 EB17          JMP     015E                    
0147 90            NOP                             
0148 D3D2          RCL     DX,CL               ;010
014A EB12          JMP     015E                    
014C 90            NOP                             
014D D3DA          RCR     DX,CL               ;011
014F EB0D          JMP     015E                    
0151 90            NOP                             
0152 D3E2          SHL     DX,CL               ;100 и 110
0154 EB08          JMP     015E                    
0156 90            NOP                             
0157 D3EA          SHR     DX,CL               ;101
0159 EB03          JMP     015E                    
015B 90            NOP                             
015C D3FA          SAR     DX,CL               ;111

;сюда попадаем после любого сдвига
015E 9F            LAHF                        ;выгрузить младшие флаги после сдвига в AH
015F 8A861900      MOV     AL,[BP+0019]        ;прочесть старшие флаги из стека (какие были до команды)
0163 701E          JO      0183                ;OF хранится в старших флагах, он уст? да - 183
0165 24F7          AND     AL,F7               ;нет - сбросить OF=0
0167 86E0          XCHG    AH,AL
0169 89861800      MOV     [BP+0018],AX        ;записать в стек правильное значение флагов после сдвига
016D 58            POP     AX                  ;восстановить первый байт команды в AL и AH (с уст. битом 1)
016E E81600        CALL    0187                ;записать результат сдвига в память или регистр
0171 A10600        MOV     AX,[0006]           ;прочесть полную длину операндов команды из E800:6
0174 01861400      ADD     [BP+0014],AX        ;увеличить IP на эту длину, чтобы он указывал на след команду 
0178 C606050000    MOV     BYTE PTR [0005],00  ;очистить E800:5, т.к. не инициализируется при входе - для последующих команд
017D 8BE5          MOV     SP,BP               ;восстановить указатель стека на сохраненные при входе регистры
017F 07            POP     ES
0180 61            POPA
0181 1F            POP     DS                  ;восстановить регистры
0182 CF            IRET                        ;закончить обработку команды, восстановить CS и SS

0183 0C08          OR      AL,08               ;установить OF=1
0185 EBE0          JMP     0167

;запись результата сдвига в требуемое место (туда же, где был и источник)
0187 F606050002    TEST    BYTE PTR [0005],02  ;операнд находится в памяти или в регистре?
018C 90            NOP
018D 750D          JNZ     019C                ;в памяти - уйти на 019С
018F F6C401        TEST    AH,01               ;8 или 16 бит операнд?
0192 7404          JZ      0198                ;8 бит - уйти на 0198                                                                       
0194 895210        MOV     [BP+SI+10],DX       ;запись результата в 16-бит регистр
                                               ;(смещение в SI - отрицательное, с 10h и менее в стеке располагаются РОН, BP - вершина стека)
0197 C3            RET
                         
0198 885210        MOV     [BP+SI+10],DL       ;запись результата в 8-бит регистр
                                               ;(смещение в SI - отрицательное, с 10h и менее в стеке располагаются РОН, BP - вершина стека)
019B C3            RET
                                               ;запись в память
019C F6C401        TEST    AH,01               ;8 или 16 бит операнд?
019F 7404          JZ      01A5                ;8 бит - уйти на 01A5 
01A1 26            ES:
01A2 8914          MOV     [SI],DX             ;запись слова результата в память
01A4 C3            RET

01A5 26            ES:
01A6 8814          MOV     [SI],DL             ;запись байта результата в память
01A8 C3            RET

;осуществляет выборку операнда в регистр DL либо DX
;вызывается третьим после 01FB, 01CB в обработчиках SHIFT и IMUL
;при вызове:
;ES указывает на правильный сегмент в памяти с учетом префиксов команды
;SI - адрес операнда
01A9 F606050002    TEST    BYTE PTR [0005],02  ;операнд находится в памяти или в регистре?
01AE 90            NOP
01AF 750D          JNZ     01BE                ;в памяти - уйти на 01BE
                                               ;операнд в регистре
01B1 F6C401        TEST    AH,01               ;8 или 16 бит операнд?
01B4 7504          JNZ     01BA                ;16 бит - уйти на 01BA
01B6 8A5210        MOV     DL,[BP+SI+10]       ;выборка операнда из 8-бит регистра
                                               ;(смещение в SI - отрицательное, с 10h и менее в стеке располагаются РОН, BP - вершина стека)
01B9 C3            RET

01BA 8B5210        MOV     DX,[BP+SI+10]       ;выборка операнда из 16-бит регистра
01BD C3            RET
                                               ;выборка из памяти
01BE F6C401        TEST    AH,01               ;8 или 16 бит операнд?
01C1 7504          JNZ     01C7                ;16 бит - уйти на 01BA
01C3 26            ES:
01C4 8A14          MOV     DL,[SI]             ;выборка 8-бит операнда из памяти
01C6 C3            RET

01C7 26            ES:
01C8 8B14          MOV     DX,[SI]             ;выборка 16-бит операнда из памяти 
01CA C3            RET

;выборка второго операнда команды в регистр CX или CL
;вызывается после 01DB в обработчиках SHIFT и IMUL
;при вызове:
;AL - первый байт команды, AH - первый байт команды с правками
;CX - CS команды, BX - указывает на следующий за опкодом байт команды
;плюс см. возвращаемое 01DB
;при возврате:
;E800:6 - реальная длина команды (увеличенная на байт или слово)
;CL/CX - второй операнд
01CB 06            PUSH    ES
01CC 8EC1          MOV     ES,CX
01CE 031E0600      ADD     BX,[0006]           ;передвинуть BX на байт, следующий за первым операндом команды
01D2 F6C401        TEST    AH,01               ;8 или 16 бит операнд? (для SHIFT)
01D5 7509          JNZ     01E0                ;16 бит - уйти на 1E0
01D7 FE060600      INC     BYTE PTR [0006]     ;увеличить длину команды на байт
01DB 26            ES:                            
01DC 8A0F          MOV     CL,[BX]             ;прочесть байтовый второй операнд в CL
01DE 07            POP     ES
01DF C3            RET

01E0 F6C402        TEST    AH,02               ;это команда SHIFT?
01E3 740C          JZ      01F1                ;нет - уйти на 1F1
01E5 FE060600      INC     BYTE PTR [0006]     ;увеличить длину команды на байт
01E9 26            ES:
01EA 8A0F          MOV     CL,[BX]             ;прочесть байтовый второй операнд в CL
01EC 91            XCHG    CX,AX
01ED 98            CBW                         
01EE 91            XCHG    CX,AX               ;превратить операнд в слово, сохраняя знак
01EF 07            POP     ES
01F0 C3            RET

;не SHIFT и 16-бит
01F1 8006060002    ADD     BYTE PTR [0006],02  ;увеличить длину команды на 2 байта
01F6 26            ES:
01F7 8B0F          MOV     CX,[BX]             ;прочесть слово второго операнда в CL
01F9 07            POP     ES
01FA C3            RET

;выборка адреса операнда 
;вызывается во всех обработчиках, кроме ENTER
;при вызове:
;BX указывает на следующий за опкодом байт команды, 
;в ES и CX - CS команды
;DS указывает на E800, стек с E800:4000
;при возврате:
;SI - смещение операнда, если он в памяти, 
;и полуфабрикат для выборки регистра, если он в регистре
;ES - сегмент операнда
;AL - второй (mod-reg-rm) байт команды
;AH - первый (опкод) байт команды
;по адресу E800:5 значение:
;бит 0 установлен - адресация по регистру BP
;бит 1 установлен - операнд в памяти (не в регистре)
;по адресу E800:6 значение:
;1=регистровый операнд, непосредственный операнд
;2=слово смещения
;3=байт смещения
;позже это будет использоваться как информация о длине команды
01FB 26            ES:
01FC 8A07          MOV     AL,[BX]             ;прочитали второй (mod-reg-rm) байт команды, т.к. IP указывает на следующий за опкодом
01FE 3CC0          CMP     AL,C0               ;операнды находятся в памяти? (если да, то два старших бита не могут быть 11, т.е. меньше C0h)
0200 7221          JB      0223                ;да - уйти на 223
                                               ;нет - случай регистровых операндов
                                               ;формируем адрес нужного регистра, сохраненного в стеке, по полю reg
                                               ;порядок регистров обратен по отношению к тому, как они сохранены по PUSHA
                                               ;важно, что здесь мы НЕ получим истинного адреса регистра, а только полуфабрикат
0202 C606060001    MOV     BYTE PTR [0006],01
0207 8BF0          MOV     SI,AX
0209 F6C401        TEST    AH,01               ;8 или 16 разрядный операнд?
020C 7408          JZ      0216                ;8 - уйти на 216
020E 83E607        AND     SI,+07              ;оставить только три младших бита rm
0211 D1E6          SHL     SI,1                ;т.к. регистры в стеке расположены по словам
0213 F7DE          NEG     SI                  ;т.к. регистры идут в обратном порядке
0215 C3            RET

;8-разрядный операнд в регистре
0216 83E603        AND     SI,+03              ;оставить только 2 младших бита rm
0219 D1E6          SHL     SI,1                ;т.к. регистры расположены по словам
021B F7DE          NEG     SI                  ;т.к. регистры идут в обратном порядке
021D A804          TEST    AL,04               ;L-половинки или H-половинки регистров?
021F 7401          JZ      0222                
0221 46            INC     SI                  ;H-половинки - адрес на 1 больше
0222 C3            RET

;операнды находятся в памяти
0223 800E050002    OR      BYTE PTR [0005],02
0228 90            NOP
0229 33F6          XOR     SI,SI               
022B 8AD0          MOV     DL,AL               ;mod-reg-rm -> DL
022D 80E2C7        AND     DL,C7               ;обнулить поле reg
0230 80FA06        CMP     DL,06               ;06=00-xxx-110 - это прямая адресация со смещ=0?
0233 745C          JZ      0291                ;да - уйти на 291
0235 8BF8          MOV     DI,AX
0237 83E707        AND     DI,+07              ;иначе использовать rm как индекс в таблице
023A D1E7          SHL     DI,1                ;таблице слов, а не байт, т.ч. сдвинем на 1 разряд
023C 2E            CS:
023D FFA5FF04      JMP     [DI+04FF]           ;переход по таблице обработчиков rm

;обработка режимов косвенной адресации к памяти
;сюда (на разные строки) попадаем из таблицы на 04ffh
;если затрагивается BP, бит 1 E800:5 уст в 1
0241 03B60A00      ADD     SI,[BP+000A]        ;точка входа rm=0: BX+SI+смещ (0A - адрес BX в стеке)
0245 03B60400      ADD     SI,[BP+0004]        ;точка входа rm=4: SI+смещ (04 - адрес SI в стеке)
0249 EB2B          JMP     0276
024B 90            NOP
024C 800E050001    OR      BYTE PTR [0005],01  ;точка входа rm=3: BP+DI+смещ 
0251 90            NOP
0252 03B60600      ADD     SI,[BP+0006]        ;06 - адрес BP в стеке
0256 03B60200      ADD     SI,[BP+0002]        ;точка входа rm=5: DI+смещ (02 - адрес DI в стеке)
025A EB1A          JMP     0276
025C 90            NOP
025D 03B60400      ADD     SI,[BP+0004]        ;точка входа rm=2: BP+SI+смещ (04 - адрес SI в стеке)
0261 03B60600      ADD     SI,[BP+0006]        ;точка входа rm=6: BP+смещ (06 - адрес BP в стеке)
0265 800E050001    OR      BYTE PTR [0005],01
026A 90            NOP
026B EB09          JMP     0276
026D 90            NOP
026E 03B60200      ADD     SI,[BP+0002]        ;точка входа rm=1: BX+DI+смещ (02 - адрес DI в стеке)
0272 03B60A00      ADD     SI,[BP+000A]        ;точка входа rm=7: BX+смещ (0A - адрес BX в стеке)

;общая часть обработки косвенной адресации после прибавления значений регистров
0276 A8C0          TEST    AL,C0               ;mod 01,10? (есть смещение?)
0278 7425          JZ      029F                ;нет - уйти на 29F
027A A840          TEST    AL,40               ;mod 01? (один байт смещения?)
027C 7413          JZ      0291                ;нет - уйти на 291
;считаем, что байт смещения один
027E 8BD0          MOV     DX,AX               ;сохраняем КОП и mod-reg-rm
0280 26            ES:
0281 8A4701        MOV     AL,[BX+01]          ;читаем байт смещения
0284 98            CBW                         ;превращаем в слово с учетом знака (т.к. прибавляем к 16бит регистру)
0285 03F0          ADD     SI,AX               ;прибавили смещение
0287 8BC2          MOV     AX,DX               ;восстановили КОП и mod-reg-rm
0289 C606060002    MOV     BYTE PTR [0006],02
028E EB14          JMP     02A4                ;перейти к выбору сегмента
0290 90            NOP

;прямая адресация со смещением =0
;два байта смещения или непосредственная словная адресация
0291 C606060003    MOV     BYTE PTR [0006],03
0296 26            ES:
0297 8B5701        MOV     DX,[BX+01]          ;прочитать слово, следующее сразу за mod-reg-rm
029A 03F2          ADD     SI,DX               ;прибавили его к SI (как смещение или как значение)
029C EB06          JMP     02A4                ;перейти к выбору сегмента
029E 90            NOP

;сюда попадем, если нет смещения
029F C606060001    MOV     BYTE PTR [0006],01

;установка регистра ES правильным сегментом для доступа к операнду
02A4 8A160100      MOV     DL,[0001]           ;прочесть байт информации о команде, считанный из 1843вг1
02A8 F6C20F        TEST    DL,0F               ;были ли сегментные префиксы?
02AB 7516          JNZ     02C3                ;да - уйти на 2C3
02AD F606050001    TEST    BYTE PTR [0005],01  ;использовали ли регистр BP?
02B2 90            NOP
02B3 7505          JNZ     02BA                ;да - уйти на 2BA
02B5 8E861200      MOV     ES,[BP+0012]        ;установить ES значением DS, которое было до команды
02B9 C3            RET

;если использовался регистр BP либо был префикс SS,
;адресоваться нужно по сегменту стека, каким он был до вызова команды (в основной паре SS:SP)
02BA F1            DB      F1
02BB FA            CLI                         ;F1 FA - переключаемся на основную пару SS:SP
02BC 8CD2          MOV     DX,SS               ;сохранили стековый сегмент
02BE F1            DB      F1
02BF FB            STI                         ;F1 FB - переключаемся обратно на теневую пару SS':SP'
02C0 8EC2          MOV     ES,DX               ;установить ES значением SS, которое было до вызова команды
02C2 C3            RET

;обработка сегментных префиксов
02C3 F6C208        TEST    DL,08               ;есть префикс CS?
02C6 90            NOP
02C7 7511          JNZ     02DA
02C9 F6C204        TEST    DL,04               ;есть префикс DS?
02CC 90            NOP
02CD 75E6          JNZ     02B5
02CF F6C202        TEST    DL,02               ;есть префикс ES?
02D2 90            NOP
02D3 74E5          JZ      02BA                ;нет - значит префикс SS
02D5 8E860000      MOV     ES,[BP+0000]        ;есть - установить ES значением ES, которое было до вызова команды
02D9 C3            RET
;префикс CS
02DA 8E861600      MOV     ES,[BP+0016]        ;установить ES значением CS, которое было до вызова команды
02DE C3            RET


;обработчик ENTER
;команда создания стекового кадра процедуры
;формат: enter nvar, nest
;C8 iw 00 если ENTER nvar,0
;C8 iw ib если ENTER nvar,nest и nest<>0
;nvar - кол-во слов памяти под переменные
;nest - уровень вложенности процедуры

;команда ENTER предполагает следующий формат стекового кадра
;(см. Морс С.П., Алберт Д.Д. Архитектура микропроцессора 80286. М.:Радио и связь, 1990 - стр.99):
;SS:BP указывает на начало (высший адрес) для стекового кадра
;[SS:BP], первый байт стекового кадра, содержит 
;"динамическую связь" - указатель на начало стекового кадра процедуры, вызвавшей данную
;[SS:BP-2] и далее содержат "индикаторы" - указатели на начало стекового кадра всех активных процедур:
;-процедура первого уровня вложенности содержит индикатор из одного слова, 
;  указывающий на свое же слово динамической связи (т.е. на следующее слово [SS:BP], высшее в кадре)
;-процедура второго уровня вложенности содержит индикатор из двух слов - 
;  [SS:BP-2] указывает на начало стекового кадра родительской процедуры,
;  [SS:BP-4] указывает на свое же слово динамической связи
;-процедура 3-го уровня вложенности содержит индикатор из трех слов - 
;  [SS:BP-2] - начало стекового кадра процедуры-дедушки, родительской для родительской
;  [SS:BP-4] - на начало стекового кадра родительской процедуры
;  [SS:BP-6] - на свое же слово динамической связи
;и так далее. Т.е n элементов индикатора стекового кадра процедуры уровня n+1
;аналогичны индикатору родительской процедуры.
;После индикаторов в стековом кадре располагается память под переменные.
;В книге Морса все пояснено на картинках и с примерами на Паскале.

;команда ENTER обновляет BP (чтобы он указывал на начало созданного стекового кадра),
;SP (резервируя место в стеке под созданный кадр),
;и записывает в начало созданного стекового кадра "динамическую связь" и "индикатор"

02DF C49E1400      LES BX,[BP+0014]     ;BX указ. на след. за опкодом байт обрабатываемой команды,ES:=CS команды
02E3 26            ES:                                                                                      
02E4 8B17          MOV DX,[BX]          ;DX:=nvar (кол-во байт памяти под переменные)                                
02E6 26            ES:                                                                                      
02E7 8A4F02        MOV CL,[BX+02]       ;CL:=nest (уровень вложенности)                                           
02EA 32ED          XOR CH,CH                                                                                
02EC F1            DB F1                                                                                    
02ED FA            CLI                  ;основной стек                                                                    
02EE 8BFC          MOV DI,SP            ;DI:=SP указатель основного стека                                                                              
02F0 F1            DB F1                                                                                    
02F1 FB            STI                  ;обратно в теневой стек                                                                    
02F2 8BB60600      MOV SI,[BP+0006]     ;SI:=BP до команды ENTER (указатель на стековый кадр процедуры, вызвавшей данную)
     ;DS ранее был установлен на SS до команды ENTER (до входа в прерывание)
02F6 8D7DFE        LEA DI,[DI-02]       ;DI:=указатель на начало создаваемого стекового кадра
02F9 89BE0600      MOV [BP+0006],DI     ;установили BP-после-команды-ENTER на начало нового стекового кадра
02FD F1            DB F1                
02FE FA            CLI                  ;основной стек                                                                    
02FF 8CD3          MOV BX,SS            ;BX:=SS сегмент основного стека
0301 F1            DB F1                                                                                    
0302 FB            STI                  ;обратно в теневой стек
0303 8EC3          MOV ES,BX            ;ES:=SS основного стека                                                                    
0305 26            ES:                                                                                      
0306 8935          MOV [DI],SI          ;записали указатель на стековый кадр родительской (вызвавшей) процедуры в создаваемый стековый кадр
0308 8BDF          MOV BX,DI            ;BX:=указатель на начало создаваемого стекового кадра
030A 80F900        CMP CL,00            ;уровень вложенности в команде ENTER =0?
030D 7415          JZ 0324              ;да - уйти на 324
     ;случай ненулевой вложенности 
030F FD            STD                  ;строковые команды:= на уменьшение
0310 1E            PUSH DS                                                                                  
0311 06            PUSH ES                                                                                  
0312 1F            POP DS               ;DS=ES:= SS основного стека
0313 49            DEC CX               ;число элементов индикатора=уровню вложенности,
                                        ;а нам нужно скопировать все элементы индикатора родительской процедуры, у нее уровень на 1 меньше
0314 8D74FE        LEA SI,[SI-02]       ;SI:=смещение на начало индикатора родительской процедуры (слово меньше того, на которое указывал BP до команды ENTER)
0317 8D7DFE        LEA DI,[DI-02]       ;DI:=смещение в основном стеке под индикатор (еще один новый операнд уже после заталкивания туда BP)
031A 80F900        CMP CL,00            ;уровень вложенности 1? (в этом случае копировать нечего)                                                                               
031D 7402          JZ 0321              ;да - уйти на 321                                                                    
031F F3            REPZ                                                                                     
0320 A5            MOVSW                ;скопировать индикатор родительской процедуры в создаваемый кадр
                                                                    
0321 891D          MOV [DI],BX          ;записать в создаваемый кадр последний элемент индикатора для вложенности >0 - 
                                        ;указатель на начало создаваемого стекового кадра
0323 1F            POP DS               ;DS:=SS основного стека                                                                    

0324 2BFA          SUB DI,DX            ;продвинуть указатель основного стека (в DI) с учетом места в стековом кадре под кол-во переменных,
                                        ;указанных в команде ENTER, под дин.связь и индикаторы указатель (DI) уже модифицирован
0326 F1            DB F1                                                                                    
0327 FA            CLI                  ;основной стек
0328 8BE7          MOV SP,DI            ;обновить непосредственно указатель основного стека                                                      
032A F1            DB F1                                                                                    
032B FB            STI                  ;обратно в теневой стек
032C 8386140003    ADD WORD PTR [BP+0014],+03 ;увеличить IP на длину команды

;завершающий этап обработки команды ENTER
;полностью аналогичен концу обработки SHIFT (адрес 0178)
;т.е. просто лишний повтор
0331 C606050000    MOV     BYTE PTR [0005],00
0336 8BE5          MOV     SP,BP
0338 07            POP     ES
0339 61            POPA
033A 1F            POP     DS
033B CF            IRET

;обработчик IMUL immediate
033C C49E1400      LES     BX,[BP+0014]        ;BX указ. на след. за опкодом байт обрабатываемой команды
0340 8CC1          MOV     CX,ES               ;ES=CX= CS обрабатываемой команды       
0342 E8B6FE        CALL    01FB                ;возвращает адрес первого операнда в SI и сегмент операнда в ES
0345 E883FE        CALL    01CB                ;возвращает второй операнд в CL или CX
0348 E85EFE        CALL    01A9                ;возвращает первый операнд в DL или DX         
034B 91            XCHG    CX,AX               ;AX=второй (непосредственный) операнд, CX = первые 2 байта команды
034C F7EA          IMUL    DX                  ;(DX,AX)=(AX)*(DX)
034E 7026          JO      0376                ;есть переполнение?
0350 81A61800FEF7  AND     WORD PTR [BP+0018],F7FE    ;нет - сбросить OF и CF
0356 8BF1          MOV     SI,CX               ;SI=первые 2 байта команды (второй на младших адресах)
0358 83E638        AND     SI,+38              ;высечь поле reg из mod-reg-rm
035B D1EE          SHR     SI,1
035D D1EE          SHR     SI,1                ;сдвинуть к началу регистра, с учетом того, что адресоваться по словам
035F F7DE          NEG     SI                  ;т.к. регистры в поле reg идут в обратном порядке по отношению к стеку
0361 894210        MOV     [BP+SI+10],AX       ;запись результата в 16-бит регистр
                                               ;(смещение в SI - отрицательное, с 10h и менее в стеке располагаются РОН, BP - вершина стека)
0364 A10600        MOV     AX,[0006]           ;прочесть полную длину операндов команды из E800:6
0367 01861400      ADD     [BP+0014],AX        ;увеличить IP на эту длину, чтобы он указывал на след команду

;завершающий этап обработки команды IMUL
;полностью аналогичен концу обработки SHIFT (адрес 0178)
;т.е. просто лишний повтор
036B C606050000    MOV     BYTE PTR [0005],00
0370 8BE5          MOV     SP,BP
0372 07            POP     ES
0373 61            POPA
0374 1F            POP     DS
0375 CF            IRET

;если получили флаг OF
0376 818E18000108  OR      WORD PTR [BP+0018],0801    ;установить OF и CF
037C EBD8          JMP     0356

;обработчик BOUND
;формат команды:
;BOUND reg16 mem
;62 mod-reg-rm mem1 mem2
;поскольку команда двухадресная, mod-reg-rm указывает на второй аргумент
037E 80CC01        OR      AH,01                      ;установить 16-бит тип операнда
0381 C49E1400      LES     BX,[BP+0014]               ;BX указ. на след. за опкодом байт обрабатываемой команды,ES:=CS команды
0385 26            ES:
0386 803FBF        CMP     BYTE PTR [BX],BF           ;операнд в регистре? (mod в mod-reg-rm = 11?)
0389 7727          JA      03B2                       ;да - уйти на 3B2 (выход из команды)
038B E86DFE        CALL    01FB                       ;возвращает адрес (???второго) операнда в SI и сегмент операнда в ES
038E 26            ES:
038F 8B0C          MOV     CX,[SI]                    ;CX:= операнд из памяти - нижняя граница массива
0391 26            ES:
0392 8B5402        MOV     DX,[SI+02]                 ;DX:= следующее за ним слово - верхняя граница массива
0395 8BF0          MOV     SI,AX                      ;SI=первые 2 байта команды (второй на младших адресах)                                       
0397 83E638        AND     SI,+38                     ;высечь поле reg из mod-reg-rm                                                              
039A D1EE          SHR     SI,1                                                                                                                    
039C D1EE          SHR     SI,1                       ;сдвинуть к началу регистра, с учетом того, что адресоваться по словам
039E F7DE          NEG     SI                         ;т.к. регистры в поле reg идут в обратном порядке по отношению к стеку
03A0 8B4210        MOV     AX,[BP+SI+10]              ;чтение операнда-регистра
                                                      ;(смещение в SI - отрицательное, с 10h и менее в стеке располагаются РОН, BP - вершина стека)
03A3 3BC8          CMP     CX,AX                      ;сравнение с нижней границей
03A5 7716          JA      03BD                       ;если вышли за нее (н.граница>числа) - уйти на 3BD
03A7 3BC2          CMP     AX,DX                      ;сравнение с верхней границей
03A9 7712          JA      03BD                       ;если вышли за нее (число>в.границв) - уйти на 3BD
03AB A10600        MOV     AX,[0006]                  ;иначе считать длину операндов команды
03AE 01861400      ADD     [BP+0014],AX               ;увеличить IP в стеке на эту длину, чтобы он указывал на начало след.команды

;обработчик ненайденной команды 
;также завершающая фаза обработчика BOUND
;полностью аналогичен концу обработки SHIFT (адрес 0178)
;т.е. просто лишний повтор
03B2 C606050000    MOV     BYTE PTR [0005],00
03B7 8BE5          MOV     SP,BP
03B9 07            POP     ES
03BA 61            POPA
03BB 1F            POP     DS
03BC CF            IRET

;BOUND: случай выхода за границу массива
;эмуляция действий процессора при вызове INT 5 
03BD 8B861400      MOV     AX,[BP+0014]               ;считать IP в стеке (указывающий на второй байт эмулируемой команды)
03C1 48            DEC     AX                         ;теперь IP указывает на опкод
03C2 F60601000F    TEST    BYTE PTR [0001],0F         ;были ли префиксы у команды?
03C7 7401          JZ      03CA
03C9 48            DEC     AX                         ;если были префиксы, сделать IP указывающим на байт префикса
                                                      ;теперь IP точно указывает на начало команды
03CA 8B9E1600      MOV     BX,[BP+0016]               ;BX:=CS команды
03CE 8B8E1800      MOV     CX,[BP+0018]               ;CX:=флаги команды
03D2 F1            DB      F1
03D3 FA            CLI                                ;переключаемся на основную пару SS:SP
03D4 51            PUSH    CX                         ;как бы pushf
03D5 53            PUSH    BX                         ;как бы push cs
03D6 50            PUSH    AX                         ;как бы push ip - все в основном стеке, как при уходе на прерывание
03D7 F1            DB      F1
03D8 FB            STI                                ;обратно на теневую пару SS':SP'
03D9 33C0          XOR     AX,AX
03DB 8EC0          MOV     ES,AX                      ;ES указывает на таблицу векторов прерываний
03DD 26            ES:
03DE A11400        MOV     AX,[0014]                  ;14h=20=5*4, начало записи для INT 5 в таблице векторов
03E1 89861400      MOV     [BP+0014],AX               ;IP стека эмулятора:= IP обработчика INT 5
03E5 26            ES:
03E6 A11600        MOV     AX,[0016]
03E9 89861600      MOV     [BP+0016],AX               ;CS стека эмулятора:= CS обработчика INT 5
03ED 80A61900FC    AND     BYTE PTR [BP+0019],FC      ;сбросить IF и TF во флагах в стеке, как при уходе на прерывание
03F2 90            NOP
03F3 EBBD          JMP     03B2                       ;возврат из эмулятора

;таблица адресов программ эмуляции команд
;адрес в таблице соответствует опкоду
03F5 0000            0
03F7 0000            2
03F9 0000            4
03FB 0000            6
03FD 0000            8
03FF 0000            a
0401 0000            c
0403 0000            e
0405 0000            10
0407 0000            12
0409 0000            14
040B 0000            16
040D 0000            18
040F 0000            1a
0411 0000            1c
0413 0000            1e
0415 0000            20
0417 0000            22
0419 0000            24
041B 0000            26
041D 0000            28
041F 0000            2a
0421 0000            2c
0423 0000            2e
0425 0000            30
0427 0000            32
0429 0000            34
042B 0000            36
042D 0000            38
042F 0000            3a
0431 0000            3c
0433 0000            3e
0435 0000            40
0437 0000            42
0439 0000            44
043B 0000            46
043D 0000            48
043F 0000            4a
0441 0000            4c
0443 0000            4e
0445 0000            50
0447 0000            52
0449 0000            54
044B 0000            56
044D 0000            58
044F 0000            5a
0451 0000            5c
0453 0000            5e
0455 0000            60
0457 0200            62h - BOUND
0459 0000            64
045B 0000            66
045D 0004            69h - IMUL immediate
045F 0004            6bh - IMUL S immediate
0461 0000            6c
0463 0000            6e
0465 0000            70                        
0467 0000            72                        
0469 0000            74                        
046B 0000            76                        
046D 0000            78                        
046F 0000            7a                        
0471 0000            7c                        
0473 0000            7e                        
0475 0000            80                        
0477 0000            82                        
0479 0000            84                        
047B 0000            86                        
047D 0000            88                        
047F 0000            8a                        
0481 0000            8c                        
0483 0000            8e                        
0485 0000            90                        
0487 0000            92                        
0489 0000            94                        
048B 0000            96                        
048D 0000            98                        
048F 0000            9a                        
0491 0000            9c                        
0493 0000            9e                        
0495 0000            a0                        
0497 0000            a2                        
0499 0000            a4                        
049B 0000            a6                        
049D 0000            a8                        
049F 0000            aa                        
04A1 0000            ac                        
04A3 0000            ae                        
04A5 0000            b0                        
04A7 0000            b2                        
04A9 0000            b4                        
04AB 0000            b6                        
04AD 0000            b8                        
04AF 0000            ba                        
04B1 0000            bc                        
04B3 0000            be                        
04B5 06              c0h - SHIFT immediate  
04B6 06              c1h - SHIFT immediate               
04B7 0000            c2
04B9 0000            c4
04BB 0000            c6
04BD 0800            c8h - ENTER
04BF 0000            ca
04C1 0000            cc 
04C3 0000            ce 
04C5 0000            d0 
04C7 0000            d2 
04C9 0000            d4 
04CB 0000            d6 
04CD 0000            d8 
04CF 0000            da 
04D1 0000            dc 
04D3 0000            de 
04D5 0000            e0 
04D7 0000            e2 
04D9 0000            e4 
04DB 0000            e6 
04DD 0000            e8 
04DF 0000            ea 
04E1 0000            ec 
04E3 0000            ee 
04E5 0000            f0 
04E7 0000            f2 
04E9 0000            f4 
04EB 0000            f6 
04ED 0000            f8 
04EF 0000            fa 
04F1 0000            fc
04F3 0000            fe

;таблица адресов обработчиков команд
04F5 B203          DW      03B2h           ;обработчик ненайденной команды
04F7 7E03          DW      037Eh           ;обрабочик BOUND (смещ.2)
04F9 3C03          DW      033Ch           ;обработчик IMUL (смещ.4)
04FB E700          DW      00E7h           ;обработчик сдвигов (смещ.6)
04FD DF02          DW      02DFh           ;обработчик ENTER (смещ.8)

;таблица адресов обработчиков режимов косвенной адресации rm  (mod=00,01,10)
04FF 4102          DW      0241h           ;rm=0
0501 6E02          DW      026Eh           ;rm=1
0503 5D02          DW      025Dh           ;rm=2
0505 4C02          DW      024Ch           ;rm=3
0507 4502          DW      0245h           ;rm=4
0509 5602          DW      0256h           ;rm=5
050B 6102          DW      0261h           ;rm=6
050D 7202          DW      0272h           ;rm=7

;таблица адресов обработчиков команд сдвига в 16-разрядном случае
;NB! по справочнику Морса reg=6 (010) не используется,
;а здесь reg=6 аналогично reg=4 (100) 
050F 3E01          DW      013Eh           ;000 - ROL   
0510 4301          DW      0143h           ;001 - ROR   
0513 4801          DW      0148h           ;010 - RCL   
0514 4D01          DW      014Dh           ;011 - RCR   
0517 5201          DW      0152h           ;100 - SHL   
0518 5701          DW      0157h           ;101 - SHR   
051B 5201          DW      0152h           ;110 - ничего
051C 5C01          DW      015Ch           ;111 - SAR   

;таблица адресов обработчиков команд сдвига в 8-разрядном случае
;NB! по справочнику Морса reg=6 (010) не используется,
;а здесь reg=6 аналогично reg=4 (100) 
051F 1B01          DW      011Bh           ;000 - ROL   
0521 2001          DW      0120h           ;001 - ROR   
0523 2501          DW      0125h           ;010 - RCL   
0525 2A01          DW      012Ah           ;011 - RCR   
0527 2F01          DW      012Fh           ;100 - SHL   
0529 3401          DW      0134h           ;101 - SHR   
052B 2F01          DW      012Fh           ;110 - ничего
052D 3901          DW      0139h           ;111 - SAR   

052F 00            DB      00h

;этого в памяти эмулятора уже не будет, это пойдет в E800:0
0530 0000          DW      0
0532 0000          DW      0
0534 0000          DW      0
0536 0000          DW      0
;end