Загрузчик эмулятора процессора 80286 для ЕС1842 (сам эмулятор m286.txt, по факту имеет формат exe).
Размер 218 байт (0...D9h).

100h Точка входа для файлов типа COM.
0100	JMP	0116h
0102	90h, 30h, 30h, 30h, 30h, 24h, 31h, 31h, 31h, 31h, 24h, 6Dh, 32h, 38h, 36h, 2Eh, 74h, 78h, 74h, 00h
	NOP  "0"  "0"  "0"  "0"  "$"  "1"  "1"  "1"  "1"  "$"  "m"  "2"  "8"  "6"  "."  "t"  "x"  "t"  00h
0116	MOV AL,10h	;Реконфигурация памяти по блокам 512кБ через порт реконфигурации ОЗУ процессора.
0118	OUT 73h,AL  	;В чём смысл?
011A	JMP 011C	;Переход на следующую команду для очистки очереди команд.
011C	CLD
011D	MOV AX,E000h	;-----------------------------------------------------
0120	MOV ES,AX
0122	MOV CX,FFFFh	;Заполняем 64кБ памяти по базовому адресу E0000h
0125	XOR DI,DI	;константой 55h
0127	MOV AL,55h
0129	REP STOSB	;-----------------------------------------------------------------
012B	MOV CX,FFFFh	
012E	XOR DI,DI	;Проверяем память на исправность.
0130	REP SCASB	;Если все ячейки совпали со значением AL,
0132	CMP DI,FFFFh	;то значит память исправна и переходим дальше к загрузке эмулятора.
0135	JE 0140h	;------------------------------------------------------------------
0137	MOV DX,0108h	;Если есть неисправные ячейки,
013A	MOV AH,09h	;то вывести на экран строку "1111".
013C	INT 21h		;-----------------------------------------------------
013E	INT 20h		;Завершить процесс.
0140	MOV DX,0103h	;-----------------------------------------------------
0143	MOV AH,09h	;Вывести на экран строку "0000".
0145	INT 21h		;-----------------------------------------------------
0147	PUSH DS		;Сохраняем DS в стеке.
0148	XOR AX,AX	;Обнуляем AX.
014A	MOV DS,AX	;Устанавливаем DS в 0.
014С	SUB WORD PTR [04E0h], 0180h	;???????????
0152	POP DS		;Восстановили DS
0153	MOV DX,010Dh	;Загрузили адрес строки с именем файла
0156	MOV AX,3D02h	
0159	INT 21h		;Открыли файл на чтение/запись
015B	MOV BX,AX	;Сохранили дескриптор в BX
015D	MOV CX,FFFFh	;Число байтов для чтения
0160	MOV AX,CS
0162	ADD AX,1000h
0165	MOV DS,AX
0167	XOR DX,DX	;Адрес буфера (DS:DX) куда копируем данные из файла
0169	MOV AX,3F00h
016C	INT 21h		;Прочитать файл
016E	MOV CX,AX	;В AX число переданных байт (размер файла). Сохраним в CX.
0170	MOV AX,3E00h
0173	INT 21h		;Закрыть файл
0175	MOV SI,0200h	;Устанавливаем SI на начало самой программы (первый байт после заголовка 512байт exe-файла)
0178	MOV AX,E000h	
017B	MOv EX,AX	;Устанавливаем ES:DI на начало области памяти, куда будет грузиться эмулятор.
017D	XOR DI,DI	
017F	MOV BX,[SI-01E2h];В BX будет 002Ch.
0183	MOV DX,[BX+SI]	;Получаем объём необходимых данных для загрузки в 16-байтных страницах. В DX будет 0053h.
0185	PUSH CX		;Сохранили в стеке общий объём файла
0186	MOV CX,DX	
0188	MOV AX,E800h
018B	MOV [BX+SI],AX	;Модифицировали 2 ячейки файла эмулятора во временном буфере хранения. Зачем???
018D	SHL CX,1	;-----------------------------------------------------------------------
018F	SHL CX,1	
0191	SHL CX,1	;Умножаем размер файла в страницах на 16, чтоб получить размер в байтах
0193	SHL CX,1	;-----------------------------------------------------------------------
0195	PUSH CX		;Сохраним вычисленный размер в стеке.
0196	CLD
0197	REP MOVSB	;Копируем код и данные из буфера временного хранения в область эмулятора (E000:0000)
0199	MOV ES,AX
019B	XOR DI,DI	;Формируем указатель E800:0000
019D	POP AX		;Восстанавливаем из стека размер области кода и данных эмулятора.
019E	POP CX		;Восстанавливаем из стека общее количество переданных байт при загрузке файла.
019F	SUB CX,AX	;Вычисляем разницу между общим кол-вом байт и размером кода и даных (фактически размер заголовка)
01A1	REP MOVSW	;Копируем что-то находящееся выше временного буфера в область E800:0000. Что и зачем???
01A3	DB F1h
01A4	STI		;Опкод F1 FA. Переключаемся на теневую пару SS':SP'.
01A5	MOV AX,E800h
01A8	MOV SS,AX
01AA	MOV SP,4000h	;Инициализируем теневую пару SS':SP' указателем E800:4000.
01AD	NOP
01AE	DB F1h
01AF	CLI		;Опкод F1 FB. Переключаемся на основную пару SS:SP.
01B0	MOV AX,E000h	;------------------------------------------------------------------------
01B3	MOV DS,AX	;Установить вектор прерывания INT 06h на обработчик находящийся по адресу DS:DX (E000:0000).
01B5	MOV DX,0000h	;Обработчик недействительного кода операции (Invalid Opcode).
01B8	MOV AX,2506h
01BB	INT 21h		;------------------------------------------------------------------------
01BD	IN AL,62h
01BF	TEST AL,08h	;Проверяем наличие сопроцессора. Если сопроцессор есть то идем на выход.
01C1	JE 01D5h
01C3	TEST AL,10h
01C5	JNE 01D5h	;------------------------------------------------------------------------
01C7	OR AL,40h	
01C9	OUT 62h,AL	;Установка триггера блокировки очереди команд сопроцессора
01CB	MOV DX,0090h	;------------------------------------------------------------------------
01CE	MOV AX,2507h	;Установить вектор прерывания INT 07h на обработчик находящийся по адресу DS:DX (E000:0090).
01D1	INT 21h		;Обработчик отсутствия сопроцессора (Math Coprocessor not available).
01D3	DB F1h		;Неизвестный опкод F1 FD. Возможно как-то связан с сопроцессором.
01D4	STD		;Возможно устанавливает бит MF в регистре флагов.???
01D5	MOV AX,4C00h
01D8	INT 21h		;Завершение программы с кодом 00h.