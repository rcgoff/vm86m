;Загрузчик эмулятора процессора 80286 для ЕС1842 (сам эмулятор m286.txt, по факту имеет формат exe).
;Размер 218 байт (0...D9h).

_TEXT segment word public 'CODE'
assume cs:_TEXT,ds:_TEXT,es:_TEXT,ss:_TEXT
	org     100h 		;Точка входа для файлов типа COM.
m286_load proc near
	JMP	LD1
MSG_0	DB	"0000$"
MSG_1	DB	"1111$"
FLNAME	DB	"m286.txt",00h
LD1:	MOV AL,10h	;Реконфигурация памяти по блокам 512кБ через порт реконфигурации ОЗУ процессора.
	OUT 73h,AL  	;В чём смысл?
	JMP LD2		;Переход на следующую команду для очистки очереди команд.
LD2:	CLD
	MOV AX,0E000h	;-----------------------------------------------------
	MOV ES,AX
	MOV CX,0FFFFh	;Заполняем 64кБ памяти по базовому адресу E0000h
	XOR DI,DI	;константой 55h
	MOV AL,55h
	REP STOSB	;-----------------------------------------------------------------
	MOV CX,0FFFFh	
	XOR DI,DI	;Проверяем память на исправность.
	REP SCASB	;Если все ячейки совпали со значением AL,
	CMP DI,0FFFFh	;то значит память исправна и переходим дальше к загрузке эмулятора.
	JE LD3		;------------------------------------------------------------------
	MOV DX,offset MSG_1	;Если есть неисправные ячейки,
	MOV AH,09h	;то вывести на экран строку "1111".
	INT 21h		;-----------------------------------------------------
	INT 20h		;Завершить процесс.
LD3:	MOV DX,offset MSG_0	;-----------------------------------------------------
	MOV AH,09h	;Вывести на экран строку "0000".
	INT 21h		;-----------------------------------------------------
	PUSH DS		;Сохраняем DS в стеке.
	XOR AX,AX	;Обнуляем AX.
	MOV DS,AX	;Устанавливаем DS в 0.
	SUB WORD PTR [04E0h], 0180h	;???????????
	POP DS		;Восстановили DS
	MOV DX,offset FLNAME	;Загрузили адрес строки с именем файла
	MOV AX,3D02h	
	INT 21h		;Открыли файл на чтение/запись
	MOV BX,AX	;Сохранили дескриптор в BX
	MOV CX,0FFFFh	;Число байтов для чтения
	MOV AX,CS
	ADD AX,1000h
	MOV DS,AX
	XOR DX,DX	;Адрес буфера (DS:DX) куда копируем данные из файла
	MOV AX,3F00h
	INT 21h		;Прочитать файл
	MOV CX,AX	;В AX число переданных байт (размер файла). Сохраним в CX.
	MOV AX,3E00h
	INT 21h		;Закрыть файл
	MOV SI,0200h	;Устанавливаем SI на начало самой программы (первый байт после заголовка 512байт exe-файла)
	MOV AX,0E000h	
	MOV ES,AX	;Устанавливаем ES:DI на начало области памяти, куда будет грузиться эмулятор.
	XOR DI,DI	
	MOV BX,[SI-01E2h];В BX будет 002Ch.
	MOV DX,[BX+SI]	;Получаем объём необходимых данных для загрузки в 16-байтных страницах. В DX будет 0053h.
	PUSH CX		;Сохранили в стеке общий объём файла
	MOV CX,DX	
	MOV AX,0E800h
	MOV [BX+SI],AX	;Модифицировали 2 ячейки файла эмулятора во временном буфере хранения. Зачем???
	SHL CX,1	;-----------------------------------------------------------------------
	SHL CX,1	
	SHL CX,1	;Умножаем размер файла в страницах на 16, чтоб получить размер в байтах
	SHL CX,1	;-----------------------------------------------------------------------
	PUSH CX		;Сохраним вычисленный размер в стеке.
	CLD
	REP MOVSB	;Копируем код и данные из буфера временного хранения в область эмулятора (E000:0000)
	MOV ES,AX
	XOR DI,DI	;Формируем указатель E800:0000
	POP AX		;Восстанавливаем из стека размер области кода и данных эмулятора.
	POP CX		;Восстанавливаем из стека общее количество переданных байт при загрузке файла.
	SUB CX,AX	;Вычисляем разницу между общим кол-вом байт и размером кода и даных (фактически размер заголовка)
	REP MOVSW	;Копируем что-то находящееся выше временного буфера в область E800:0000. Что и зачем???
	DB 0F1h
	STI		;Опкод F1 FA. Переключаемся на теневую пару SS':SP'.
	MOV AX,0E800h
	MOV SS,AX
	MOV SP,4000h	;Инициализируем теневую пару SS':SP' указателем E800:4000.
	NOP
	DB 0F1h
	CLI		;Опкод F1 FB. Переключаемся на основную пару SS:SP.
	MOV AX,0E000h	;------------------------------------------------------------------------
	MOV DS,AX	;Установить вектор прерывания INT 06h на обработчик находящийся по адресу DS:DX (E000:0000).
	MOV DX,0000h	;Обработчик недействительного кода операции (Invalid Opcode).
	MOV AX,2506h
	INT 21h		;------------------------------------------------------------------------
	IN AL,62h
	TEST AL,08h	;Проверяем наличие сопроцессора. Если сопроцессор есть то идем на выход.
	JE LD4
	TEST AL,10h
	JNE LD4		;------------------------------------------------------------------------
	OR AL,40h	
	OUT 62h,AL	;Установка триггера блокировки очереди команд сопроцессора
	MOV DX,0090h	;------------------------------------------------------------------------
	MOV AX,2507h	;Установить вектор прерывания INT 07h на обработчик находящийся по адресу DS:DX (E000:0090).
	INT 21h		;Обработчик отсутствия сопроцессора (Math Coprocessor not available).
	DB 0F1h		;Неизвестный опкод F1 FD. Возможно как-то связан с сопроцессором.
	STD		;Возможно устанавливает бит MF в регистре флагов.???
LD4:	MOV AX,4C00h
	INT 21h		;Завершение программы с кодом 00h.
m286_load endp
_TEXT ends
end m286_load
