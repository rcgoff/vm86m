;Загрузчик эмулятора процессора 80286 для ЕС1842 (сам эмулятор m286.txt по факту имеет формат exe).
;Размер 218 байт (0...D9h).
;Изначальная версия -  Tim_npx 19.12.2021
;Полноценный ASM-файл, прояснение некоторых непоняток - L.Yadrennikov (RCgoff) 15.04.2022
                                                       
exe_code equ 200h	;смещение начала секции кода в EXE файле
exe_relt equ 1eh	;смещение первого элемента таблицы настройки сегментов в заголовке EXE файла

mem_port equ 73h	;5-разрядный порт реконфигурации ОЗУ ЕС1842

DATA segment at 0	;0:400h - начало области данных BIOS
org 4e0h  		;в ЕС1841 по этому адресу располагается таблица объема расширенной памяти в кб, возможно и в ЕС1842
tabl	dw ?
DATA ends

_TEXT segment word public 'CODE'
assume cs:_TEXT,ds:_TEXT,es:_TEXT,ss:_TEXT
	org     100h 		;Точка входа для файлов типа COM.
m286_load proc near
	JMP	LD1
MSG_0	DB	"0000$"
MSG_1	DB	"1111$"
FLNAME	DB	"m286.txt",00h
LD1:	MOV AL,10h	;Установить бит 4 порта реконфигурации ОЗУ "Режим расширенной адресации" в 1,
	OUT mem_port,AL ; а биты 1,2,3 "Код доступа к старшей области (384К) в 0 
	JMP short LD2	;Переход на следующую команду для очистки очереди команд.
LD2:	CLD
	MOV AX,0E000h	;-----------------------------------------------------
	MOV ES,AX
	MOV CX,0FFFFh	;Заполняем 64кБ памяти по базовому адресу E0000h
	XOR DI,DI	;константой 55h
	MOV AL,55h
	REP STOSB	;-----------------------------------------------------------------
	MOV CX,0FFFFh	
	XOR DI,DI	;Проверяем память на исправность.
	REP SCASB	;Если все ячейки совпали со значением AL,
	CMP DI,0FFFFh	;то значит память исправна и переходим дальше к загрузке эмулятора.
	JE LD3		;------------------------------------------------------------------
	MOV DX,offset MSG_1	;Если есть неисправные ячейки,
	MOV AH,09h	;то вывести на экран строку "1111".
	INT 21h		;-----------------------------------------------------
	INT 20h		;Завершить процесс.
LD3:	MOV DX,offset MSG_0	;---------------------------------------------
	MOV AH,09h	;Вывести на экран строку "0000".
	INT 21h		;-----------------------------------------------------
	PUSH DS		;Сохраняем DS в стеке.
assume ds:DATA
	XOR AX,AX	;Обнуляем AX.
	MOV DS,AX	;Устанавливаем DS в 0.
	SUB tabl, 384	;Уменьшаем в таблице объем доступной расширенной памяти на 384Кб, т.к. отвели ее под эмулятор
assume ds:_TEXT
	POP DS		;Восстановили DS
	MOV DX,offset FLNAME	;Загрузили адрес строки с именем файла
	MOV AX,3D02h	
	INT 21h		;Открыли файл на чтение/запись
	MOV BX,AX	;Сохранили дескриптор в BX
	MOV CX,0FFFFh	;Число байтов для чтения
	MOV AX,CS
	ADD AX,1000h
	MOV DS,AX
	XOR DX,DX	;Адрес буфера (DS:DX) куда копируем данные из файла
	MOV AX,3F00h
	INT 21h		;Прочитать файл
	MOV CX,AX	;В AX число переданных байт (размер файла). Сохраним в CX.
	MOV AX,3E00h
	INT 21h		;Закрыть файл
	MOV SI,exe_code	;Устанавливаем SI на начало самой программы (первый байт после заголовка 512байт exe-файла)
	MOV AX,0E000h	
	MOV ES,AX	;Устанавливаем ES:DI на начало области памяти, куда будет грузиться эмулятор.
	XOR DI,DI	
	MOV BX,[SI-(exe_code-exe_relt)]	;Прочли первую запись таблицы настройки сегментов (002Ch для M286.TXT)
	MOV DX,[BX+SI]	;Прочли слово кода по адресу из таблицы настройки сегментов (0053h).
	PUSH CX		;Сохранили в стеке общий объём файла
	MOV CX,DX	
	MOV AX,0E800h
	MOV [BX+SI],AX	;Настроили сегмент по адресу из таблицы настройки - теперь в коде эмулятора сегмент E800
	SHL CX,1	;-----------------------------------------------------------------------
	SHL CX,1	;Сегмент, который настроили по таблице, показывает размер кода+данных эмулятора в параграфах 
	SHL CX,1	;Умножаем его на 16, чтоб получить размер в байтах
	SHL CX,1	;-----------------------------------------------------------------------
	PUSH CX		;Сохраним вычисленный размер в стеке.
	CLD
	REP MOVSB	;Копируем код и данные из буфера временного хранения в область эмулятора (E000:0000)
	MOV ES,AX
	XOR DI,DI	;Формируем указатель E800:0000
	POP AX		;Восстанавливаем из стека размер области кода и данных эмулятора.
	POP CX		;Восстанавливаем из стека общее количество переданных байт при загрузке файла.
	SUB CX,AX	;Вычисляем разницу между общим кол-вом байт и размером кода и даных (8 нулей в конце файла+512 байт заголовка)
	REP MOVSW	;Инициализируем область E800:0000 - теперь она начинается с восьми нулей
	DB 0F1h
	STI		;Опкод F1 FB. Переключаемся на теневую пару SS':SP'.
	MOV AX,0E800h
	MOV SS,AX
	MOV SP,4000h	;Инициализируем теневую пару SS':SP' указателем E800:4000.
	NOP
	DB 0F1h
	CLI		;Опкод F1 FA. Переключаемся на основную пару SS:SP.
	MOV AX,0E000h	;------------------------------------------------------------------------
	MOV DS,AX	;Установить вектор прерывания INT 06h на обработчик находящийся по адресу DS:DX (E000:0000).
	MOV DX,0000h	;Обработчик недействительного кода операции (Invalid Opcode).
	MOV AX,2506h
	INT 21h		;------------------------------------------------------------------------
	IN AL,62h
	TEST AL,08h	;Проверяем наличие сопроцессора. Если сопроцессора нет то идем на выход.
	JZ LD4
	TEST AL,10h     ;Если частота сопроцессора 8МГц или не установлен, то идем на выход.
	JNZ LD4		;------------------------------------------------------------------------
	OR AL,40h	
	OUT 62h,AL	;Установка триггера блокировки очереди команд сопроцессора
	MOV DX,0090h	;------------------------------------------------------------------------
	MOV AX,2507h	
	INT 21h	        ;Установить вектор прерывания INT 07h на обработчик находящийся по адресу DS:DX (E000:0090).
	DB 0F1h		
	STD		;Установить бит MF (13) в регистре флагов в 0: генерировать INT 07h на каждую сопроцессорную команду ESC
LD4:	MOV AX,4C00h
	INT 21h		;Завершение программы с кодом 00h.
m286_load endp
_TEXT ends
end m286_load
