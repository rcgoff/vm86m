 	 	 	 	;Загрузчик эмулятора процессора 80286 для ЕС1842 (сам эмулятор m286.txt по факту имеет формат exe).
 	 	 	 	;Размер 218 байт (0...D9h).
 	 	 	 	;Изначальная версия -  Tim_npx 19.12.2021
 	 	 	 	;Полноценный ASM-файл, прояснение некоторых непоняток - L.Yadrennikov (RCgoff) 15.04.2022
 	 	 	 	                                                       
 = 0200	 	 	 	exe_code equ 200h	;смещение начала секции кода в EXE файле
 = 001E	 	 	 	exe_relt equ 1eh	;смещение первого элемента таблицы настройки сегментов в заголовке EXE файла
 	 	 	 	
 = 0073	 	 	 	mem_port equ 73h	;5-разрядный порт реконфигурации ОЗУ ЕС1842
 	 	 	 	
 0000	 	 	 	DATA segment at 0	;0:400h - начало области данных BIOS
 04E0	 	 	 	org 4e0h  	 	;в ЕС1841 по этому адресу располагается таблица объема расширенной памяти в кб, возможно и в ЕС1842
 04E0  ????	 	 	tabl	dw ?
 04E2	 	 	 	DATA ends
 	 	 	 	
 0000	 	 	 	_TEXT segment word public 'CODE'
 	 	 	 	assume cs:_TEXT,ds:_TEXT,es:_TEXT,ss:_TEXT
 0100	 	 	 	 	org     100h 	 	;Точка входа для файлов типа COM.
 0100	 	 	 	m286_load proc near
 0100  EB 14 90	 	 	 	JMP	LD1
 0103  30 30 30 30 24	 	MSG_0	DB	"0000$"
 0108  31 31 31 31 24	 	MSG_1	DB	"1111$"
 010D  6D 32 38 36 2E 74	FLNAME	DB	"m286.txt",00h
       78 74 00	 	 	
 0116  B0 10	 	 	LD1:	MOV AL,10h	;Установить бит 4 порта реконфигурации ОЗУ "Режим расширенной адресации" в 1,
 0118  E6 73	 	 	 	OUT mem_port,AL ; а биты 1,2,3 "Код доступа к старшей области (384К) в 0 
 011A  EB 00	 	 	 	JMP short LD2	;Переход на следующую команду для очистки очереди команд.
 011C  FC	 	 	LD2:	CLD
 011D  B8 E000	 	 	 	MOV AX,0E000h	;-----------------------------------------------------
 0120  8E C0	 	 	 	MOV ES,AX
 0122  B9 FFFF	 	 	 	MOV CX,0FFFFh	;Заполняем 64кБ памяти по базовому адресу E0000h
 0125  33 FF	 	 	 	XOR DI,DI	;константой 55h
 0127  B0 55	 	 	 	MOV AL,55h
 0129  F3/ AA	 	 	 	REP STOSB	;-----------------------------------------------------------------
 012B  B9 FFFF	 	 	 	MOV CX,0FFFFh	
 012E  33 FF	 	 	 	XOR DI,DI	;Проверяем память на исправность.
 0130  F3/ AE	 	 	 	REP SCASB	;Если все ячейки совпали со значением AL,
 0132  83 FF FF	 	 	 	CMP DI,0FFFFh	;то значит память исправна и переходим дальше к загрузке эмулятора.
 0135  74 09	 	 	 	JE LD3	 	;------------------------------------------------------------------
 0137  BA 0108 R	 	 	MOV DX,offset MSG_1	;Если есть неисправные ячейки,
 013A  B4 09	 	 	 	MOV AH,09h	;то вывести на экран строку "1111".
 013C  CD 21	 	 	 	INT 21h	 	;-----------------------------------------------------
 013E  CD 20	 	 	 	INT 20h	 	;Завершить процесс.
 0140  BA 0103 R	 	LD3:	MOV DX,offset MSG_0	;---------------------------------------------
 0143  B4 09	 	 	 	MOV AH,09h	;Вывести на экран строку "0000".
 0145  CD 21	 	 	 	INT 21h	 	;-----------------------------------------------------
 0147  1E	 	 	 	PUSH DS	 	;Сохраняем DS в стеке.
 	 	 	 	assume ds:DATA
 0148  33 C0	 	 	 	XOR AX,AX	;Обнуляем AX.
 014A  8E D8	 	 	 	MOV DS,AX	;Устанавливаем DS в 0.
 014C  81 2E 04E0 R 0180	 	SUB tabl, 384	;Уменьшаем в таблице объем доступной расширенной памяти на 384Кб, т.к. отвели ее под эмулятор
 	 	 	 	assume ds:_TEXT
 0152  1F	 	 	 	POP DS	 	;Восстановили DS
 0153  BA 010D R	 	 	MOV DX,offset FLNAME	;Загрузили адрес строки с именем файла
 0156  B8 3D02	 	 	 	MOV AX,3D02h	
 0159  CD 21	 	 	 	INT 21h	 	;Открыли файл на чтение/запись
 015B  8B D8	 	 	 	MOV BX,AX	;Сохранили дескриптор в BX
 015D  B9 FFFF	 	 	 	MOV CX,0FFFFh	;Число байтов для чтения
 0160  8C C8	 	 	 	MOV AX,CS
 0162  05 1000	 	 	 	ADD AX,1000h
 0165  8E D8	 	 	 	MOV DS,AX
 0167  33 D2	 	 	 	XOR DX,DX	;Адрес буфера (DS:DX) куда копируем данные из файла
 0169  B8 3F00	 	 	 	MOV AX,3F00h
 016C  CD 21	 	 	 	INT 21h	 	;Прочитать файл
 016E  8B C8	 	 	 	MOV CX,AX	;В AX число переданных байт (размер файла). Сохраним в CX.
 0170  B8 3E00	 	 	 	MOV AX,3E00h
 0173  CD 21	 	 	 	INT 21h	 	;Закрыть файл
 0175  BE 0200	 	 	 	MOV SI,exe_code	;Устанавливаем SI на начало самой программы (первый байт после заголовка 512байт exe-файла)
 0178  B8 E000	 	 	 	MOV AX,0E000h	
 017B  8E C0	 	 	 	MOV ES,AX	;Устанавливаем ES:DI на начало области памяти, куда будет грузиться эмулятор.
 017D  33 FF	 	 	 	XOR DI,DI	
 017F  8B 9C FE1E	 	 	MOV BX,[SI-(exe_code-exe_relt)]	;Прочли первую запись таблицы настройки сегментов (002Ch для M286.TXT)
 0183  8B 10	 	 	 	MOV DX,[BX+SI]	;Прочли слово кода по адресу из таблицы настройки сегментов (0053h).
 0185  51	 	 	 	PUSH CX	 	;Сохранили в стеке общий объём файла
 0186  8B CA	 	 	 	MOV CX,DX	
 0188  B8 E800	 	 	 	MOV AX,0E800h
 018B  89 00	 	 	 	MOV [BX+SI],AX	;Настроили сегмент по адресу из таблицы настройки - теперь в коде эмулятора сегмент E800
 018D  D1 E1	 	 	 	SHL CX,1	;-----------------------------------------------------------------------
 018F  D1 E1	 	 	 	SHL CX,1	;Сегмент, который настроили по таблице, показывает размер кода+данных эмулятора в параграфах 
 0191  D1 E1	 	 	 	SHL CX,1	;Умножаем его на 16, чтоб получить размер в байтах
 0193  D1 E1	 	 	 	SHL CX,1	;-----------------------------------------------------------------------
 0195  51	 	 	 	PUSH CX	 	;Сохраним вычисленный размер в стеке.
 0196  FC	 	 	 	CLD
 0197  F3/ A4	 	 	 	REP MOVSB	;Копируем код и данные из буфера временного хранения в область эмулятора (E000:0000)
 0199  8E C0	 	 	 	MOV ES,AX
 019B  33 FF	 	 	 	XOR DI,DI	;Формируем указатель E800:0000
 019D  58	 	 	 	POP AX	 	;Восстанавливаем из стека размер области кода и данных эмулятора.
 019E  59	 	 	 	POP CX	 	;Восстанавливаем из стека общее количество переданных байт при загрузке файла.
 019F  2B C8	 	 	 	SUB CX,AX	;Вычисляем разницу между общим кол-вом байт и размером кода и даных (8 нулей в конце файла+512 байт заголовка)
 01A1  F3/ A5	 	 	 	REP MOVSW	;Инициализируем область E800:0000 - теперь она начинается с восьми нулей
 01A3  F1	 	 	 	DB 0F1h
 01A4  FB	 	 	 	STI	 	;Опкод F1 FA. Переключаемся на теневую пару SS':SP'.
 01A5  B8 E800	 	 	 	MOV AX,0E800h
 01A8  8E D0	 	 	 	MOV SS,AX
 01AA  BC 4000	 	 	 	MOV SP,4000h	;Инициализируем теневую пару SS':SP' указателем E800:4000.
 01AD  90	 	 	 	NOP
 01AE  F1	 	 	 	DB 0F1h
 01AF  FA	 	 	 	CLI	 	;Опкод F1 FB. Переключаемся на основную пару SS:SP.
 01B0  B8 E000	 	 	 	MOV AX,0E000h	;------------------------------------------------------------------------
 01B3  8E D8	 	 	 	MOV DS,AX	;Установить вектор прерывания INT 06h на обработчик находящийся по адресу DS:DX (E000:0000).
 01B5  BA 0000	 	 	 	MOV DX,0000h	;Обработчик недействительного кода операции (Invalid Opcode).
 01B8  B8 2506	 	 	 	MOV AX,2506h
 01BB  CD 21	 	 	 	INT 21h	 	;------------------------------------------------------------------------
 01BD  E4 62	 	 	 	IN AL,62h
 01BF  A8 08	 	 	 	TEST AL,08h	;Проверяем наличие сопроцессора. Если сопроцессор есть то идем на выход.
 01C1  74 12	 	 	 	JE LD4
 01C3  A8 10	 	 	 	TEST AL,10h
 01C5  75 0E	 	 	 	JNE LD4	 	;------------------------------------------------------------------------
 01C7  0C 40	 	 	 	OR AL,40h	
 01C9  E6 62	 	 	 	OUT 62h,AL	;Установка триггера блокировки очереди команд сопроцессора
 01CB  BA 0090	 	 	 	MOV DX,0090h	;------------------------------------------------------------------------
 01CE  B8 2507	 	 	 	MOV AX,2507h	;Установить вектор прерывания INT 07h на обработчик находящийся по адресу DS:DX (E000:0090).
 01D1  CD 21	 	 	 	INT 21h	 	;Обработчик отсутствия сопроцессора (Math Coprocessor not available).
 01D3  F1	 	 	 	DB 0F1h	 	;Неизвестный опкод F1 FD. Возможно как-то связан с сопроцессором.
 01D4  FD	 	 	 	STD	 	;Возможно устанавливает бит MF в регистре флагов.???
 01D5  B8 4C00	 	 	LD4:	MOV AX,4C00h
 01D8  CD 21	 	 	 	INT 21h	 	;Завершение программы с кодом 00h.
 01DA	 	 	 	m286_load endp
 01DA	 	 	 	_TEXT ends
 	 	 	 	end m286_load


Segments and Groups:

	 	N a m e	 	 	Size	Align	Combine	Class

DATA . . . . . . . . . . . . . .	04E2	AT    	0000	
_TEXT. . . . . . . . . . . . . .	01DA	WORD  	PUBLIC	'CODE'

Symbols:            

	 	N a m e	 	 	Type	Value	Attr         

EXE_CODE . . . . . . . . . . . .	Number	0200	
EXE_RELT . . . . . . . . . . . .	Number	001E	
FLNAME . . . . . . . . . . . . .	L BYTE 	010D	_TEXT
LD1. . . . . . . . . . . . . . .	L NEAR 	0116	_TEXT
LD2. . . . . . . . . . . . . . .	L NEAR 	011C	_TEXT
LD3. . . . . . . . . . . . . . .	L NEAR 	0140	_TEXT
LD4. . . . . . . . . . . . . . .	L NEAR 	01D5	_TEXT
M286_LOAD. . . . . . . . . . . .	N PROC	0100	_TEXT	Length =00DA
MEM_PORT . . . . . . . . . . . .	Number	0073	
MSG_0. . . . . . . . . . . . . .	L BYTE 	0103	_TEXT
MSG_1. . . . . . . . . . . . . .	L BYTE 	0108	_TEXT
TABL . . . . . . . . . . . . . .	L WORD 	04E0	DATA

49690 Bytes free   

Warning Severe
Errors	Errors 
0	0
